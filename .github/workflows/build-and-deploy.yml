name: Build and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set image output
        run: |
          echo "IMAGE_TAG=ghcr.io/${{ github.repository }}:latest" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to Self-Hosted
    runs-on: [self-hosted, linux, X64]
    needs: build

    steps:
      - name: Setup environment
        run: |
          mkdir -p /opt/optibot/logs
          cd /opt/optibot

      - name: Create environment file
        run: |
          cat > /opt/optibot/.env << EOF
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ASSISTANT_ID=${{ secrets.ASSISTANT_ID }}
          VECTOR_STORE_ID=${{ secrets.VECTOR_STORE_ID }}
          MODEL=gpt-4o-mini
          CHUNK_SIZE=800
          CHUNK_OVERLAP=200
          LOCALE=en-us
          MAX_ARTICLES=45
          ARTICLES_DIR=./articles
          EOF

      - name: Pull latest image
        run: |
          docker pull ghcr.io/${{ github.repository }}:latest
          docker tag ghcr.io/${{ github.repository }}:latest optibot:latest

      - name: Stop existing container
        run: |
          docker stop optibot-cron || true
          docker rm optibot-cron || true

      - name: Setup cron job
        run: |
          crontab -l 2>/dev/null | grep -v "optibot" | crontab - || true
          (crontab -l 2>/dev/null; echo "0 2 * * * /usr/bin/docker run --rm --env-file /opt/optibot/.env -v /opt/optibot/logs:/app/runs --name optibot-cron optibot:latest >> /opt/optibot/logs/cron.log 2>&1") | crontab -

      - name: Test deployment
        run: |
          docker run --rm --env-file /opt/optibot/.env -v /opt/optibot/logs:/app/runs optibot:latest
          echo "Deployment completed!"
