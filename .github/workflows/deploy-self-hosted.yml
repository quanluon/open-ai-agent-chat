name: Manual Deploy

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: [self-hosted, linux, X64]

    steps:
      - name: Setup environment
        run: |
          chmod +x ./scripts/*.sh
          ./scripts/setup-environment.sh

      - name: Create environment file
        run: |
          cat > /opt/optibot/.env << EOF
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ASSISTANT_ID=${{ secrets.ASSISTANT_ID }}
          VECTOR_STORE_ID=${{ secrets.VECTOR_STORE_ID }}
          MODEL=gpt-4o-mini
          CHUNK_SIZE=800
          CHUNK_OVERLAP=200
          LOCALE=en-us
          MAX_ARTICLES=45
          ARTICLES_DIR=./articles
          EOF

      - name: Set image tag from secrets
        run: |
          echo "Using image tag from secrets"
          echo "IMAGE_TAG=${{ secrets.DOCKERHUB_USERNAME }}/optisign-bot:latest" >> $GITHUB_ENV

      - name: Pull Docker image
        run: |
          echo "Pulling image: ${{ env.IMAGE_TAG }}"
          docker pull ${{ env.IMAGE_TAG }} || {
            echo "❌ Failed to pull image: ${{ env.IMAGE_TAG }}"
            echo "Please check if the image exists and you have access to it."
            echo "Make sure DOCKERHUB_USERNAME secret is set correctly."
            exit 1
          }
          docker tag ${{ env.IMAGE_TAG }} optibot:latest
          echo "✅ Image pulled and tagged successfully"

      - name: Stop existing containers
        run: |
          chmod +x ./scripts/*.sh
          ./scripts/cleanup-containers.sh

      - name: Setup cron job
        run: |
          chmod +x ./scripts/*.sh
          ./scripts/setup-cron.sh

      - name: Test deployment
        run: |
          chmod +x ./scripts/*.sh
          ./scripts/test-deployment.sh

      - name: Sync articles from container to host
        run: |
          echo "🔄 Syncing articles from container to host..."
          # Articles are already synced via volume mount, just verify
          echo "✅ Articles available on host: $(ls /opt/optibot/articles/*.md 2>/dev/null | wc -l) files"

      - name: Show deployment status
        run: |
          chmod +x ./scripts/*.sh
          IMAGE_TAG="${{ env.IMAGE_TAG }}" ./scripts/verify-deployment.sh
