name: Manual Deploy

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: [self-hosted, linux, X64]

    steps:
      - name: Setup environment
        run: |
          mkdir -p /opt/optibot/logs
          mkdir -p /opt/optibot/articles
          chmod 777 /opt/optibot/logs
          chmod 777 /opt/optibot/articles
          cd /opt/optibot

      - name: Create environment file
        run: |
          cat > /opt/optibot/.env << EOF
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ASSISTANT_ID=${{ secrets.ASSISTANT_ID }}
          VECTOR_STORE_ID=${{ secrets.VECTOR_STORE_ID }}
          MODEL=gpt-4o-mini
          CHUNK_SIZE=800
          CHUNK_OVERLAP=200
          LOCALE=en-us
          MAX_ARTICLES=45
          ARTICLES_DIR=./articles
          EOF

      - name: Set image tag from secrets
        run: |
          echo "Using image tag from secrets"
          echo "IMAGE_TAG=${{ secrets.DOCKERHUB_USERNAME }}/optisign-bot:latest" >> $GITHUB_ENV

      - name: Pull Docker image
        run: |
          echo "Pulling image: ${{ env.IMAGE_TAG }}"
          docker pull ${{ env.IMAGE_TAG }} || {
            echo "❌ Failed to pull image: ${{ env.IMAGE_TAG }}"
            echo "Please check if the image exists and you have access to it."
            echo "Make sure DOCKERHUB_USERNAME secret is set correctly."
            exit 1
          }
          docker tag ${{ env.IMAGE_TAG }} optibot:latest
          echo "✅ Image pulled and tagged successfully"

      - name: Stop existing containers
        run: |
          echo "Stopping any existing optibot containers..."
          docker stop optibot-cron optibot-test 2>/dev/null || true
          docker rm optibot-cron optibot-test 2>/dev/null || true
          echo "✓ Container cleanup completed"

      - name: Setup cron job
        run: |
          crontab -l 2>/dev/null | grep -v "optibot" | crontab - || true
          (crontab -l 2>/dev/null; echo "0 2 * * *  /usr/bin/docker run --rm --env-file /opt/optibot/.env -v /opt/optibot/logs:/app/runs --user appuser --name optibot-cron optibot:latest >> /opt/optibot/logs/cron.log 2>&1") | crontab -

      - name: Test deployment
        run: |
          echo "🧪 Testing deployment with temporary container..."
          docker run --rm --name optibot-test --env-file /opt/optibot/.env -v /opt/optibot/logs:/app/runs --user appuser optibot:latest || {
            echo "❌ Deployment test failed!"
            echo "Check the container logs above for errors."
            exit 1
          }
          echo "✅ Deployment test completed successfully!"

      - name: Show deployment status
        run: |
          echo "=== Deployment Summary ==="
          echo "✅ Image: ${{ env.IMAGE_TAG }}"
          echo "✅ Environment: /opt/optibot/.env"
          echo "✅ Cron job: Daily at 2 AM UTC"
          echo "✅ Log directory: /opt/optibot/logs/"
          echo ""
          echo "=== Cron Schedule ==="
          crontab -l | grep optibot || echo "No cron jobs found"
          echo ""
          echo "=== Recent Logs ==="
          tail -5 /opt/optibot/logs/cron.log 2>/dev/null || echo "No recent logs"
