name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Docker image tag to deploy"
        required: true
        default: "${{ secrets.DOCKERHUB_USERNAME }}/optisign-bot:latest"

jobs:
  deploy:
    runs-on: [self-hosted, linux, X64]

    steps:
      - name: Setup environment
        run: |
          mkdir -p /opt/optibot/logs
          cd /opt/optibot

      - name: Create environment file
        run: |
          cat > /opt/optibot/.env << EOF
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ASSISTANT_ID=${{ secrets.ASSISTANT_ID }}
          VECTOR_STORE_ID=${{ secrets.VECTOR_STORE_ID }}
          MODEL=gpt-4o-mini
          CHUNK_SIZE=800
          CHUNK_OVERLAP=200
          LOCALE=en-us
          MAX_ARTICLES=45
          ARTICLES_DIR=./articles
          EOF

      - name: Pull Docker image
        run: |
          docker pull ${{ github.event.inputs.image_tag }}
          docker tag ${{ github.event.inputs.image_tag }} optibot:latest

      - name: Stop existing container
        run: |
          docker stop optibot-cron || true
          docker rm optibot-cron || true

      - name: Setup cron job
        run: |
          crontab -l 2>/dev/null | grep -v "optibot" | crontab - || true
          (crontab -l 2>/dev/null; echo "0 2 * * * /usr/bin/docker run --rm --env-file /opt/optibot/.env -v /opt/optibot/logs:/app/runs --name optibot-cron optibot:latest >> /opt/optibot/logs/cron.log 2>&1") | crontab -

      - name: Test deployment
        run: |
          docker run --rm --env-file /opt/optibot/.env -v /opt/optibot/logs:/app/runs optibot:latest
          echo "Deployment completed!"
